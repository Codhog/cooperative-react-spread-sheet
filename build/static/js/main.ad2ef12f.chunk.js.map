{"version":3,"sources":["socket.js","Cell/Cell.js","Row/Row.js","Table/Table.js","App.js","reportWebVitals.js","index.js"],"names":["socket","socketClient","window","location","host","transports","Cell","props","onChange","e","setState","value","target","display","determineDisplay","x","y","onKeyPressOnInput","key","hasNewValue","onKeyPressOnSpan","state","editing","onBlur","emit","displayName","handleUnselectAll","selected","onChangedValue","updateCells","emitUnselectAllEvent","unselectAllEvent","Event","document","dispatchEvent","clicked","timer","setTimeout","prevent","delay","doubleClicked","clearTimeout","currentXy","typingName","calculateCss","css","width","padding","margin","height","boxSizing","position","color","border","textAlign","verticalAlign","fontSize","lineHeight","overflow","fontFamily","backgroundColor","fontWeight","on","data","dataName","dataCoor","addEventListener","removeEventListener","this","nextProps","nextState","otherEditing","style","alpha","split","onKeyPress","role","outlineColor","outlineStyle","length","type","placeholder","autoFocus","onClick","onDoubleClick","prevState","React","Component","Row","cells","push","handleChangedCell","rowData","Table","modifiedData","Object","assign","sendMessage","editEndChangedCell","forceUpdate","sdata","sendername","sender","xycoor","newValue","rows","App","handleLogin","username","current","displayTable","createRef","className","ref","marginTop","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ad2ef12f.chunk.js","sourcesContent":["import socketClient from \"socket.io-client\";\r\n\r\nconst socket = socketClient(window.location.host, {\r\n  transports: [\"websocket\"],\r\n});\r\n\r\nexport { socket }","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { socket } from \"../socket\";\r\n/**\r\n * Cell represents the atomic element of a table\r\n */\r\n\r\nexport default class Cell extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      editing: false,\r\n      // otherEditing: false,\r\n      selected: false,\r\n      value: props.value,\r\n      typingName: '',\r\n      currentXy: []\r\n    };\r\n    this.display = this.determineDisplay(\r\n      { x: props.x, y: props.y },\r\n      props.value\r\n    );\r\n    this.timer = 0;\r\n    this.delay = 200;\r\n    this.prevent = false;\r\n  }\r\n\r\n  /**\r\n   * Add listener to the `unselectAll` event used to broadcast the\r\n   * unselect all event\r\n   */\r\n  componentDidMount() {\r\n    // window.document.addEventListener(\"unselectAll\", this.handleUnselectAll);\r\n\r\n    socket.on('skeditcoming', (data) => {\r\n      // 取消其他选中框\r\n      this.emitUnselectAllEvent();\r\n      // Determine if I'm the one sending, to disable other one's input\r\n      this.setState({\r\n        typingName: data.dataName,\r\n        currentXy: [...data.dataCoor],\r\n        editing: true\r\n      })\r\n      // if (data.dataName === this.props.displayName) {\r\n\r\n      // }\r\n      // else {\r\n      //   console.log('ither state', [...data.dataCoor]);\r\n      //   this.setState({\r\n      //     typingName: data.dataName,\r\n      //     currentXy: [...data.dataCoor],\r\n      //     editing:false,\r\n      //     // otherEditing: true\r\n      //   })\r\n      // }\r\n\r\n    })\r\n\r\n    socket.on('editendcoming', (data) => {\r\n      window.document.addEventListener(\"unselectAll\", this.handleUnselectAll);\r\n      this.setState({\r\n        typingName: '',\r\n        currentXy: [],\r\n        editing: false\r\n      })\r\n      // if (data.name === this.props.displayName) {\r\n\r\n      // }\r\n      // else {\r\n      //   this.setState({\r\n      //     typingName: '',\r\n      //     currentXy: [],\r\n      //     otherEditing: false,\r\n      //     editing: false\r\n      //   })\r\n      // }\r\n\r\n    })\r\n\r\n  }\r\n\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    const { value } = nextProps\r\n    if (value.length > 0) {\r\n      return {\r\n        editing: true,\r\n        value: value,\r\n      }\r\n\r\n    }\r\n    return null\r\n\r\n  }\r\n  componentWillUnmount() {\r\n    window.document.removeEventListener(\"unselectAll\", this.handleUnselectAll);\r\n  }\r\n\r\n  /**\r\n   * When a Cell value changes, re-determine the display value\r\n   * by calling the formula calculation\r\n   */\r\n  onChange = (e) => {\r\n    this.setState({ value: e.target.value });\r\n    this.display = this.determineDisplay(\r\n      { x: this.props.x, y: this.props.y },\r\n      e.target.value\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Handle pressing a key when the Cell is an input element\r\n   */\r\n  onKeyPressOnInput = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      this.hasNewValue(e.target.value);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Handle pressing a key when the Cell is a span element,\r\n   * not yet in editing mode\r\n   */\r\n  onKeyPressOnSpan = () => {\r\n    if (!this.state.editing) {\r\n      this.setState({ editing: true });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Handle moving away from a cell, stores the new value\r\n   * 编辑结束 发送信号\r\n   */\r\n  onBlur = (e) => {\r\n    socket.emit('editend', {\r\n      'xycoor': [this.props.x, this.props.y],\r\n      'newValue': e.target.value,\r\n      'name': this.props.displayName\r\n    })\r\n    this.hasNewValue(e.target.value);\r\n  };\r\n\r\n  /**\r\n   * Used by `componentDid(Un)Mount`, handles the `unselectAll`\r\n   * event response\r\n   */\r\n  handleUnselectAll = () => {\r\n    if (this.state.selected || this.state.editing) {\r\n      this.setState({ selected: false, editing: false });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Called by the `onBlur` or `onKeyPressOnInput` event handlers,\r\n   * it escalates the value changed event, and restore the editing\r\n   * state to `false`.\r\n   * 输入结束\r\n   */\r\n  hasNewValue = (value) => {\r\n\r\n    this.props.onChangedValue(\r\n      {\r\n        x: this.props.x,\r\n        y: this.props.y,\r\n      },\r\n      value\r\n    );\r\n    this.setState({ editing: false });\r\n    this.props.updateCells()\r\n  };\r\n\r\n  /**\r\n   * Emits the `unselectAll` event, used to tell all the other\r\n   * cells to unselect\r\n   */\r\n  emitUnselectAllEvent = () => {\r\n    const unselectAllEvent = new Event(\"unselectAll\");\r\n    window.document.dispatchEvent(unselectAllEvent);\r\n  };\r\n\r\n\r\n  /**\r\n   * Handle clicking a Cell.\r\n   */\r\n  clicked = () => {\r\n    // Prevent click and double click to conflict\r\n    this.emitUnselectAllEvent();\r\n\r\n    this.timer = setTimeout(() => {\r\n      if (!this.prevent) {\r\n        // Unselect all the other cells and set the current\r\n        // Cell state to `selected`\r\n        this.emitUnselectAllEvent();\r\n        this.setState({ selected: true });\r\n      }\r\n      this.prevent = false;\r\n    }, this.delay);\r\n\r\n  };\r\n\r\n  /**\r\n   * Handle doubleclicking a Cell.\r\n   */\r\n  doubleClicked = () => {\r\n    // Prevent click and double click to conflict\r\n    clearTimeout(this.timer);\r\n    this.prevent = true;\r\n    this.emitUnselectAllEvent();\r\n\r\n    this.setState({\r\n      selected: true,\r\n      currentXy: [this.props.x, this.props.y],\r\n      typingName: this.props.displayName\r\n    });\r\n    // Unselect all the otfher cells and set the current\r\n    // Cell state to `selected` & `editing`\r\n    // 双击格子后 发送信号\r\n    socket.emit('skediting', {\r\n      'dataName': this.props.displayName,\r\n      'dataCoor': [this.props.x, this.props.y]\r\n    })\r\n  };\r\n\r\n  determineDisplay = ({ x, y }, value) => {\r\n    return value;\r\n  };\r\n\r\n  /**\r\n   * Calculates a cell's CSS values\r\n   */\r\n  calculateCss = () => {\r\n    const css = {\r\n      width: \"80px\",\r\n      padding: \"4px\",\r\n      margin: \"0\",\r\n      height: \"25px\",\r\n      boxSizing: \"border-box\",\r\n      position: \"relative\",\r\n      display: \"inline-block\",\r\n      color: \"black\",\r\n      border: \"1px solid #cacaca\",\r\n      textAlign: \"left\",\r\n      verticalAlign: \"top\",\r\n      fontSize: \"14px\",\r\n      lineHeight: \"15px\",\r\n      overflow: \"hidden\",\r\n      fontFamily: \"Calibri, 'Segoe UI', Thonburi,Arial, Verdana, sans-serif\",\r\n    };\r\n\r\n    if (this.props.x === 0 || this.props.y === 0) {\r\n      css.textAlign = \"center\";\r\n      css.backgroundColor = \"#f0f0f0\";\r\n      css.fontWeight = \"bold\";\r\n    }\r\n\r\n    return css;\r\n  };\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    // Has a formula value? could be affected by any change. Update\r\n    if (this.state.value !== \"\") {\r\n      return true;\r\n    }\r\n\r\n    // Its own state values changed? Update\r\n    // Its own value prop changed? Update\r\n    if (\r\n      nextState.value !== this.state.value ||\r\n      nextState.editing !== this.state.editing ||\r\n      nextState.selected !== this.state.selected\r\n      || nextProps.value !== this.props.value\r\n    ) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  render() {\r\n    const css = this.calculateCss();\r\n    const {selected, currentXy, typingName, value, otherEditing} = this.state\r\n    // column 0\r\n    // console.log(`re-render了么 oe=${otherEditing} currentXy=${currentXy[0]}`, currentXy.length > 0 && this.props.x === currentXy[0] &&\r\n    // this.props.y === currentXy[1]);\r\n    if (this.props.x === 0) {\r\n      return <span style={css}>{this.props.y}</span>;\r\n    }\r\n\r\n    // row 0\r\n    if (this.props.y === 0) {\r\n      const alpha = \" abcdefghijklmnopqrstuvwxyz\".split(\"\");\r\n      return (\r\n        <span\r\n          onKeyPress={this.onKeyPressOnSpan}\r\n          style={css}\r\n          role=\"presentation\"\r\n        >\r\n          {alpha[this.props.x]}\r\n        </span>\r\n      );\r\n    }\r\n\r\n    if (selected) {\r\n      css.outlineColor = \"lightblue\";\r\n      css.outlineStyle = \"dotted\";\r\n    }\r\n    if (currentXy.length > 0 && this.props.x === currentXy[0] &&\r\n      this.props.y === currentXy[1]) {\r\n        // console.log('Other', otherEditing, typingName, value);\r\n        return(\r\n          <>\r\n          <input\r\n            style={css}\r\n            type=\"text\"\r\n            onBlur={this.onBlur}\r\n            onKeyPress={this.onKeyPressOnInput}\r\n            value={value}\r\n            onChange={this.onChange}\r\n            placeholder={typingName + ' is typing'}\r\n            autoFocus\r\n          />\r\n        </>\r\n        );\r\n        // if(otherEditing){\r\n        //   console.log('跑了没');\r\n\r\n        // }\r\n        // else{\r\n        //   return (\r\n        //     <>\r\n        //       <input\r\n        //         style={css}\r\n        //         type=\"text\"\r\n        //         onBlur={this.onBlur}\r\n        //         onKeyPress={this.onKeyPressOnInput}\r\n        //         value={this.state.value}\r\n        //         onChange={this.onChange}\r\n        //         placeholder={this.state.typingName + '正在编辑'}\r\n        //         autoFocus\r\n        //       />\r\n        //     </>\r\n        //   );\r\n        // }\r\n\r\n    }\r\n\r\n    return (\r\n      <span\r\n        onClick={(e) => this.clicked(e)}\r\n        onDoubleClick={(e) => this.doubleClicked(e)}\r\n        style={css}\r\n        role=\"presentation\"\r\n      >\r\n        {this.state.value}\r\n      </span>\r\n    );\r\n  }\r\n}\r\n\r\nCell.propTypes = {\r\n  onChangedValue: PropTypes.func.isRequired,\r\n  x: PropTypes.number.isRequired,\r\n  y: PropTypes.number.isRequired,\r\n  value: PropTypes.string.isRequired,\r\n};\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Cell from '../Cell/Cell'\r\n\r\nconst Row = (props) => {\r\n  const cells = []\r\n  const y = props.y\r\n  for (let x = 0; x < props.x; x += 1) {\r\n    cells.push(\r\n      <Cell\r\n        key={`${x}-${y}`}\r\n        y={y}\r\n        x={x}\r\n        onChangedValue={props.handleChangedCell}\r\n        updateCells={props.updateCells}\r\n        value={props.rowData[x] || ''}\r\n        displayName={props.displayName}\r\n      />,\r\n    )\r\n  }\r\n  return (\r\n    <div>\r\n      {cells}\r\n    </div>\r\n  )\r\n}\r\n\r\nRow.propTypes = {\r\n  handleChangedCell: PropTypes.func.isRequired,\r\n  updateCells: PropTypes.func.isRequired,\r\n  x: PropTypes.number.isRequired,\r\n  y: PropTypes.number.isRequired,\r\n  rowData: PropTypes.shape({\r\n    string: PropTypes.string,\r\n  }).isRequired,\r\n}\r\n\r\nexport default Row","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Row from \"../Row/Row\";\r\nimport { socket } from \"../socket\";\r\n// import socketClient from \"socket.io-client\";\r\n\r\nexport default class Table extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    this.state = {\r\n      data: {},\r\n      displayName: props.displayName,\r\n      sender: ''\r\n    };\r\n  }\r\n\r\n  handleChangedCell = ({ x, y }, value) => {\r\n    const modifiedData = Object.assign({}, this.state.data);\r\n    if (!modifiedData[y]) modifiedData[y] = {};\r\n    modifiedData[y][x] = value;\r\n    this.setState({ data: modifiedData });\r\n    this.sendMessage(modifiedData, this.props.displayName)\r\n  };\r\n\r\n  editEndChangedCell = ({ x, y }, value) => {\r\n    const modifiedData = Object.assign({}, this.state.data);\r\n    if (!modifiedData[y]) modifiedData[y] = {};\r\n    modifiedData[y][x] = value;\r\n    this.setState({ data: modifiedData });\r\n    this.forceUpdate()\r\n  };\r\n\r\n  sendMessage = (sdata, sendername) => {\r\n    socket.emit(\"skchange\", { \r\n      data: sdata,\r\n      sender: sendername\r\n    });\r\n  };\r\n\r\n  updateCells = () => {\r\n    this.forceUpdate();\r\n  };\r\n\r\n\r\n\r\n  componentDidMount() {\r\n    socket.on(\"sknew\", (sdata) => {\r\n      this.setState({\r\n        data: sdata.data,\r\n        sender: sdata.sender\r\n      })\r\n      this.forceUpdate()\r\n    });\r\n\r\n    socket.on('editendcoming', (data) => {\r\n      let [x,y] = [data.xycoor[0], data.xycoor[1]]\r\n      this.editEndChangedCell({x, y}, data.newValue)  \r\n    })\r\n  }\r\n\r\n\r\n  render() {\r\n    const rows = [];\r\n    for (let y = 0; y < this.props.y + 1; y += 1) {\r\n      const rowData = this.state.data[y] || {};\r\n      rows.push(\r\n        <Row\r\n          handleChangedCell={this.handleChangedCell}\r\n          updateCells={this.updateCells}\r\n          key={y}\r\n          y={y}\r\n          x={this.props.x + 1}\r\n          rowData={rowData}\r\n          displayName={this.props.displayName}\r\n        />\r\n      );\r\n    }\r\n\r\n    return <div>{rows}</div>;\r\n\r\n  }\r\n}\r\n\r\nTable.propTypes = {\r\n  x: PropTypes.number.isRequired,\r\n  y: PropTypes.number.isRequired,\r\n  displayName: PropTypes.string.isRequired,\r\n};\r\n","import React from \"react\";\nimport Table from \"./Table/Table\";\nimport { socket } from \"./socket\";\nimport './App.css';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.username = React.createRef();\n    this.state = {\n      displayTable: false,\n    };\n  }\n\n  handleLogin = () => {\n    socket.emit(\"getID\", this.username.current.value);\n    this.setState({\n      displayTable: true,\n    });\n  };\n\n\n  render() {\n    if (this.username.current) {\n    }\n\n\n\n    if (this.state.displayTable) {\n      return (\n        <div style={{ width: \"max-content\" }}>\n          <Table x={4} y={4} displayName={this.username.current.value} />\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"box\">\n          <h1>Cooperative Editing Sheet</h1>\n          <input\n            type=\"text\"\n            placeholder=\"Please type username\"\n            ref={this.username}\n          />\n          <button\n            style={{\n              marginTop: '20px',\n              padding: '10px'\n            }}\n            type=\"submit\" onClick={this.handleLogin}>Enter</button>\n        </div>\n\n      );\n    }\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}